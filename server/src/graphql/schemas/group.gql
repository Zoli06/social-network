enum NotificationFrequency {
  off
  low
  frequent
}

enum Visibility {
  hidden
  visible
  open
}

enum GroupUserRelationshipType {
  member
  banned
  admin
  member_request
  member_request_rejected
  invited
}

type GroupUserRelationship {
  user: User!
  group: Group!
  type: GroupUserRelationshipType
  createdAt: Date
  updatedAt: Date
}

type Group {
  groupId: ID!
  creatorUser: User!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  messages(onlyInterestedInMessageId: ID, maxDepth: Int): [Message!]! # onlyInterestedInMessageId replaces post
  # TODO: consider these return GroupUserRelationship
  members: [User!]!
  memberRequests: [User!]!
  bannedUsers: [User!]!
  invitedUsers: [User!]!
  admins: [User!]!
  rejectedUsers: [User!]!
  otherUsers: [User!]!
  notificationFrequency: NotificationFrequency!
  description: String
  visibility: Visibility!
  userRelationshipWithGroup(userId: ID): GroupUserRelationship!
  myRelationshipWithGroup: GroupUserRelationship!
  indexImage: Media
  bannerImage: Media
}

input GroupInput {
  name: String!
  description: String
  visibility: Visibility!
  indexImageMediaId: ID
  bannerImageMediaId: ID
}

type Query {
  group(groupId: ID!): Group!
  searchGroups(query: String!): [Group!]!
}

type Mutation {
  createGroup(group: GroupInput!): Group!
  updateGroup(groupId: ID!, group: GroupInput!): Group!
  deleteGroup(groupId: ID!): ID!

  sendGroupInvitation(groupId: ID!, userId: ID!): Boolean!
  acceptGroupInvitation(groupId: ID!): Boolean!
  rejectGroupInvitation(groupId: ID!): Boolean!
  banUser(groupId: ID!, userId: ID!): Boolean
  unbanUser(groupId: ID!, userId: ID!): Boolean!
  addAdmin(groupId: ID!, userId: ID!): Boolean!
  removeAdmin(groupId: ID!, userId: ID!): Boolean!
  sendMemberRequest(groupId: ID!): Boolean!
  cancelMemberRequest(groupId: ID!): Boolean!
  acceptMemberRequest(groupId: ID!, userId: ID!): Boolean!
  rejectMemberRequest(groupId: ID!, userId: ID!): Boolean!
  leaveGroup(groupId: ID!): Boolean!
  kickUser(groupId: ID!, userId: ID!): Boolean!

  setNotificationFrequency(
    groupId: ID!
    frequency: NotificationFrequency!
  ): NotificationFrequency!
}
