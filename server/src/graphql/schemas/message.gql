enum VoteType {
  up
  down
}

enum MessagePermission {
  author
  admin
  none
}

type Reaction {
  user: User!
  createdAt: Date!
  updatedAt: Date!
  type: Int!
}

input MediaInput {
  url: String!
  caption: String
}

type Message {
  messageId: ID!
  group: Group!
  author: User!
  createdAt: Date!
  updatedAt: Date!
  text: String!
  responseTo: Message
  responses: [Message!]!
  responseTree(maxDepth: Int): [Message!]!
  responsesCount: Int!
  reactions: [Reaction!]!
  reaction: Reaction
  upVotes: Int!
  downVotes: Int!
  vote: VoteType
  mentionedUsers: [User!]!
  medias: [Media!]! # urls of the medias
  myPermissionToMessage: MessagePermission!
}

input MessageInput {
  text: String!
  groupId: ID!
  responseToMessageId: ID
  mentionedUserIds: [ID!]
  mediaIds: [String!]
}

input MessageEditInput {
  messageId: ID!
  text: String!
  mentionedUserIds: [ID!]
  mediaIds: [String!]
}

type Query {
  message(messageId: ID!): Message
}

type Mutation {
  sendMessage(message: MessageInput!): Message
  editMessage(message: MessageEditInput!): Message
  deleteMessage(messageId: ID!): [ID!]
  createReaction(messageId: ID!, type: Int): Reaction # also can be used to delete and update
  createVote(messageId: ID!, type: VoteType): VoteType # also can be used to delete and update
}

type VoteChange {
  upVotes: Int!
  downVotes: Int!
}

type Subscription {
  messageAdded(groupId: ID!): ID!
  messageEdited(groupId: ID!): ID!
  messagesDeleted(groupId: ID!): [ID!]!
  messageReacted(messageId: ID!): [Reaction!]!
  messageVoted(messageId: ID!): VoteChange!
}
