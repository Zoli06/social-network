enum NotificationFrequency {
  off
  low
  frequent
}

enum Visibility {
  visible
  hidden
}

enum GroupUserRelationshipType {
  member
  banned
  admin
  member_request
  member_request_rejected
  invited
}

type GroupUserRelationship {
  user: User!
  group: Group!
  type: GroupUserRelationshipType!
  createdAt: Date!
  updatedAt: Date!
}

type Group {
  groupId: ID!
  createdByUser: User!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  messages(onlyInterestedInMessageId: ID, maxDepth: Int): [Message!]!  # onlyInterestedInMessageId replaces post
  members: [User!]!
  memberRequests: [User!]!
  bannedUsers: [User!]!
  invitedUsers: [User!]!
  admins: [User!]!
  rejectedUsers: [User!]!
  notificationFrequency: NotificationFrequency
  description: String
  visibility: Visibility!
  userRelationShipWithGroup: GroupUserRelationship!
}

input GroupInput {
  name: String!
  description: String
  visibility: Visibility!
}

type Query {
  group(groupId: ID): Group
}

type Mutation {
  createGroup(group: GroupInput!): Group
  updateGroup(groupId: ID!, group: GroupInput!): Group
  deleteGroup(groupId: ID!): ID

  # TODO: return relationship type
  sendGroupInvitation(groupId: ID!, userId: ID!): Boolean
  acceptGroupInvitation(groupId: ID!): Boolean
  rejectGroupInvitation(groupId: ID!): Boolean
  banUser(groupId: ID!, userId: ID!): Boolean
  unbanUser(groupId: ID!, userId: ID!): Boolean
  addAdmin(groupId: ID!, userId: ID!): Boolean
  removeAdmin(groupId: ID!, userId: ID!): Boolean
  sendMemberRequest(groupId: ID!): Boolean
  acceptMemberRequest(groupId: ID!, userId: ID!): Boolean
  rejectMemberRequest(groupId: ID!, userId: ID!): Boolean
  leaveGroup(groupId: ID!): Boolean
  kickUser(groupId: ID!, userId: ID!): Boolean

  setNotificationFrequency(groupId: ID!, frequency: NotificationFrequency!): Boolean
}